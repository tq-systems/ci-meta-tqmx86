#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2021-2023 TQ-Systems GmbH <oss@ew.tq-group.com>,
# D-82229 Seefeld, Germany.
# Author: Markus Niebel, Paul Gerber
#
# Description: build all machines in a layer with a given config
#
###############################################################################
set -e
set -C # noclobber

# TRAP SIGNALS
trap 'cleanup' QUIT EXIT

trap 'error_abort $LINENO' ERR

# For security reasons, explicitly set the internal field separator
# to newline, space, tab
OLD_IFS=$IFS
IFS='
 	'

function cleanup () {
	IFS="${OLD_IFS}"
	return 0
}

function error_abort () {
	echo "error at $1"
	cleanup
}

readonly SCRIPTNAME="${0}"
readonly SCRIPTPATH=$(dirname "$(readlink -f "${0}")")
readonly SCRIPT="$(basename "${0}")"

. ${SCRIPTPATH}/utils

usage() {
	echo -e "\nUsage: ${SCRIPTNAME} <build-dir> [template] [--dryrun] [--debug] \n \
	<build-dir>: specifies the build directory location (required) \n \
	[template]: template bblayers.conf to use \n \
	[-h|--help]: print this message \n \
	[--dryrun]: don't call bitbake \n \
	[--debug]: print additional informations \n
	If the variable \"LOCAL\" is defined in environment of ${SCRIPT}, the
	variables \"DISTRO_LIST\", \"MACHINE_LIST\" and \"IMAGE_LIST\" can be used
	to define what is fetched. Otherwise the lists are calculated."
}

main () {

	pos_params=""

	while (( "$#" )); do
		case "$1" in
		-h|--help )
			usage
			return 0
			;;
		--debug )
			DEBUG="on"
			shift
			;;
		--dryrun )
			dryrun="on"
			shift
			;;
		-*|--*=) # unsupported flags
			error_out "Error: Unsupported flag $1"
			;;
		*) # preserve positional arguments
			pos_params="$pos_params $1"
			shift
			;;
		esac
	done

	# set positional arguments in their proper place
	eval set -- "$pos_params"

	if [ $# -lt 1 ]
	then
		usage
		exit 1
	fi

	local build_dir=${1}
	local config="mainline"
	if ! [ -z "${2}" ]
	then
		config=${2}
	fi

	local top_dir=$(pwd)
	local distros=$(get_distros_for_config "${config}")
	local machines=$(get_machines "${config}")

	debug "Machines to build: ${machines}"
	debug "Distros to build: ${distros}"

	for distro in ${distros}
	do
		# GENERAL

		local images=$(get_images ${distro})
		debug "Images to build: ${images}"

		# source the real setup workhorse
		export EULA="y"
		export DISTRO=${distro}
		export MACHINE=$(echo ${machines} | awk '{ print $1 }')

		# clean conf, to enforce a really clean configuration and to enable
		# incremental changes in the config using our template dir
		rm -rf ${build_dir}_${distro}/conf

		# although DISTRO and MACHINE are exported, setup-environment
		# uses these variable mainly to set default in local.conf
		# afterwards they can be set again to iterate over all buildable
		# machines
		if ! . ./setup-environment ${build_dir}_${distro} ${config}
		then
			error_out "sourcing setup-environment failed"
		fi

		info "build mirror"
		do_link_auto_conf "mirror"
		info "clean local dirs in $(pwd) ..."
		rm -rf ./cache ./tmp* ./sstate-cache

		# get DL_DIR to cleanup packages generated from git ...
		setter=$(bitbake -e | grep ^"DL_DIR=")
		echo "$setter"
		export ${setter}

		# if there is a .done file and / or a git2_*.tar.gz it seems the
		# fetcher does not rerun git to update the repo
		info "clean git2 tarballs from ${DL_DIR} ..."
		rm -f ${DL_DIR}/git2_*.tar.gz
		rm -f ${DL_DIR}/git2_*.tar.gz.done
		if ls -1 ${DL_DIR}/git2_* 2>/dev/null
		then
			error_out "${DL_DIR} not clean, stop"
		fi

		for img in ${images}
		do
			# now force bitbake to do a --runall fetch for the image to generate
			for machine in ${machines}
			do
				# overwrite MACHINE
				export MACHINE=${machine}
				info "baking: ${machine} ${distro} ${img} with --runall=fetch"
				if [ -z ${dryrun} ]
				then
					if ! bitbake ${img} --runall=fetch -k
					then
						error_out "fetching (${img} for ${machine}) failed"
					fi
				fi
			done
		done

		url=$(bitbake -e | grep ^"SOURCE_MIRROR_URL=")
		export ${url}
		SOURCE_MIRROR_URL=${SOURCE_MIRROR_URL#\"*}
		SOURCE_MIRROR_URL=${SOURCE_MIRROR_URL%\"*}
		SOURCE_MIRROR_URL=${SOURCE_MIRROR_URL#file://*}

		DL_DIR=${DL_DIR#\"*}
		DL_DIR=${DL_DIR%\"*}

		info "copy tarballs from ${DL_DIR} to ${SOURCE_MIRROR_URL} ..."
		if [ -z ${dryrun} ]
			then
			files=$(find ${DL_DIR} -maxdepth 1 -type f -not -name "*.done")
			info "copy ${files}"
			for f in ${files}; do
				cp ${f} ${SOURCE_MIRROR_URL}
			done

			cwd=$(pwd)
			cd ${DL_DIR}
			files=$(find uninative -maxdepth 2 -type f -not -name "*.done")
			for f in ${files}; do
				dir=$(dirname ${f})
				mkdir -p ${SOURCE_MIRROR_URL}/${dir}
				cp ${f} ${SOURCE_MIRROR_URL}/${dir}
			done
		fi

		cd ${top_dir}
	done
	cd ${cwd}
}

main "${@}"
