#!/bin/bash
#
# File:        setup_builddir
# Copyright (C) 2017-2022 TQ-Systems GmbH
# @author Markus Niebel <Markus.Niebel@tq-group.com>
#
# Description: additional builddir setup
#
# License:     GPLv2
#
###############################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
###############################################################################

readonly SCRIPTNAME="${0}"
readonly SCRIPTPATH=$(dirname "$(readlink -f "${0}")")
readonly SCRIPT="$(basename "${0}")"

. ${SCRIPTPATH}/utils

##############
# handle different type of licenses and cope with CI build setup
# $1        - EULA_TYPE [NXP, FSL, TI, QT5]
# $2 ... $n - names of LICENSE files needed to accept
#
# - check for ACCEPT_${EULA_TYPE}_EULA in [local,auto].conf
# - check for ${EULA} in env
# if not set, show LICENSE files given with a preface depending on ${EULA_TYPE}
# and query for acception. If accepted, set ACCEPT_${EULA_TYPE}_EULA in local.conf
# Additionally add 'NXP-EULA-v24' to the list of enabled licenses if ${EULA_TYPE}
# is 'NXP''
##############
handle_eula() {
	local EULA_TYPE="${1}"
	shift
	local EULA_FILES="${@}"
	# Handle EULA setting
	local EULA_ACCEPTED=

	if grep -q "^\s*ACCEPT_${EULA_TYPE}_EULA\s*=\s*[\"'\'']..*[\"'\'']" conf/local.conf; then
		EULA_ACCEPTED=1
	fi
	if grep -q "^\s*ACCEPT_${EULA_TYPE}_EULA\s*=\s*[\"'\'']..*[\"'\'']" conf/auto.conf; then
		EULA_ACCEPTED=1
	fi

	if [ -z "${EULA_ACCEPTED}" ] && [ -n "${EULA}" ]; then
		# The EULA is not set as accepted in [local,auto].conf, but the EULA
		# variable is set in the environment, so we just configure
		# ACCEPT_${EULA_TYPE}_EULA in local.conf according to $EULA.
		echo "ACCEPT_${EULA_TYPE}_EULA = \"${EULA}\"" >> conf/local.conf
	elif [ -n "${EULA_ACCEPTED}" ]; then
		# The EULA has been accepted once, so ACCEPT_${EULA_TYPE}_EULA is set
		# in local.conf.  No need to do anything.
		:
	else
		# The EULA is not set as accepted in local.conf / auto.conf,
		# and EULA is not set in the environment, so we need to ask user
		# if he/she accepts the EULA:

		case ${EULA_TYPE} in
			FSL|NXP)
cat <<EOF
Some BSPs depend on libraries and packages which are covered by NXP's
End User License Agreement (EULA). To have the right to use these binaries in
your images, you need to read and accept the following...
EOF
				;;
			TI)
cat <<EOF
Some BSPs depend on libraries and packages which are covered by TI's licenses
(TI-TFL and TI-TSPA). To have the right to use these software in your images,
you need to read and accept the following...
EOF
				;;
			QT5)
cat <<EOF
The BSP configuration includes meta-qt5. This BSP is configured to build the
Open Source version of Qt5. Therefore you need to read and accept the following ...
EOF
				;;
		esac

		sleep 4

		more -d ${EULA_FILES}
		echo
		REPLY=
		while [ -z "${REPLY}" ]; do
			echo -n "Do you accept the EULA you just read? (y/n)"
			read REPLY
			case "${REPLY}" in
			y|Y)
				echo "EULA has been accepted."
				echo "ACCEPT_${EULA_TYPE}_EULA = \"1\"" >> conf/local.conf
				;;
			n|N)
				echo "EULA has not been accepted."
				;;
			*)
				REPLY=
				;;
			esac
		done
	fi
}

##############
# handle licenses that must be accepted
# $1        - BSPROOT
##############
handle_licenses() {
	local BSPROOT="${1}"

	if grep -q "meta-qt5" conf/bblayers.conf; then
		handle_eula QT5 "${BSPROOT}/sources/meta-qt5/licenses/Digia-Qt-LGPL-Exception-1.1 \
			${BSPROOT}/sources/meta-qt5/licenses/The-Qt-Company-GPL-Exception-1.0"
	fi
}

##############
# setup conf dir
# copy / link files from TEMPLATECONF dir
# $1        - TEMPLATECONF dir
# $2        - BBLAYERS_TEMPLATE file
##############
setup_confdir() {
	local TEMPLATECONF="${1}"
	local BBLAYERS_TEMPLATE="${2}"

	mv conf/local.conf conf/local.conf.sample

	# Generate the local.conf based on the defaults
	grep -v '^#\|^$' "conf/local.conf.sample" > "conf/local.conf"

	echo "link additional includes from ${TEMPLATES} to ./conf/ ..."
	FILES=$(find "${TEMPLATECONF}" -maxdepth 1 -type f -name "*.inc")
	for f in ${FILES}; do
		ln -s "${f}" "conf/$(basename ${f})"
	done
	echo "link auto.conf templates from ${TEMPLATES} to ./conf/ ..."
	FILES=$(find "${TEMPLATECONF}" -maxdepth 1 -type f -name "auto.conf*")
	for f in ${FILES}; do
		ln -s "${f}" "conf/$(basename ${f})"
	done
	ln -s "${TEMPLATECONF}/auto.conf.normal" ./conf/auto.conf
	if ! [ -e ./conf/auto.conf ]; then
		echo "missing auto.conf" >&2
		return 1
	fi

	# copy bblayers.conf template
	if [ -e "${TEMPLATECONF}/${BBLAYERS_TEMPLATE}" ]; then
		ln -s "${TEMPLATECONF}/${BBLAYERS_TEMPLATE}" conf/bblayers.conf.tmpl
		cp "${TEMPLATECONF}/${BBLAYERS_TEMPLATE}" conf/bblayers.conf
	fi

	# check for site.conf and create link if available
	if [ -e ${HOME}/.oe/site.conf ]; then
		ln -s ${HOME}/.oe//site.conf conf
	elif [ -e ${HOME}/.yocto/site.conf ]; then
		ln -s ${HOME}/.yocto/site.conf conf
	fi

	return 0
}

##############
# set some defaults in local.conf file
# $1        - MACHINE
# $2        - DISTRO
##############
patch_localconf() {
	MACHINE=${1}
	DISTRO=${2}

	# Change settings according environment
	assign_or_replace MACHINE ${MACHINE} "??=" conf/local.conf
	assign_or_replace DISTRO ${DISTRO} "?=" conf/local.conf
}

default_machine () {
	local CONFIG=${1}
	local CONFIG_MACHINES=$(get_machines ${CONFIG})
	local DEFAULT_MACHINE=$(echo ${CONFIG_MACHINES} | awk '{ print $1 }')

	echo ${DEFAULT_MACHINE}
}

main() {
	case "${1}" in
		handle_licenses )
			shift
			handle_licenses "${@}"
			;;
		localconf_defaults )
			shift
			patch_localconf "${@}"
			;;
		confdir_setup )
			shift
			setup_confdir "${@}"
			;;
		default_machine )
			shift
			default_machine "${@}"
			;;
		* ) # unsupported
			echo "Error: Unsupported action $1" >&2
			exit 1
			;;	esac
}

main "${@}"
