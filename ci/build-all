#!/bin/bash
#
# File:        build-all
# Copyright (C) 2017-2020 TQ-Systems GmbH
# @author Markus Niebel <Markus.Niebel@tq-group.com>
#
# Description: build all machines in a layer with a given config
#
# License:     GPLv2
#
###############################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
###############################################################################

readonly SCRIPTNAME="${0}"
readonly SCRIPTPATH=$(dirname $(readlink -f "${0}"))
readonly SCRIPT="$(basename "${0}")"

DEBUG="off"

usage() {
	echo -e "\nUsage: ${SCRIPTNAME} <build-dir> <template> [<mode>] \n \
	<build-dir>: specifies the build directory location (required) \n \
	<template>: template bblayers.conf to use \n \
	mode=normal or not given: do normal build \n
	mode=mirror: if given, download only and provide mirror tarballs \n
	mode=ci: if given, use only mirror tarballs to build"
}

####
# func:   __print
# brief:  print messags
# param:  $1 - message type (info, err, dbg)
#         $2 - message
# return: ---
####
__print () {
	local type="${1}"
	local msg="${2}"

	case ${type} in
		info)
			echo -e "${SCRIPT} [INFO]: ${msg}"
			;;
		err)
			echo -e "${SCRIPT} [ERROR]: ${msg}" >&2
			;;
		dbg)
			[ "${DEBUG}" = "on" ] && echo -e "${SCRIPT} [DEBUG]: ${msg}"
			;;
	esac
}

debug () {
	__print dbg "$@"
}

info () {
	__print info "$@"
}

error () {
	__print err "$@"
}

error_out () {
	echo "FATAL: $1" >&2
	exit 1
}

assign_or_replace() {
	local var=${1////\\/}
	local val=${2////\\/}
	local infile=${3}

	debug "trying assign/replace $1 $2:"
	debug "/^${var} =/{h;s/=.*/= \"${val}\"/};\${x;/^$/{s//${var} = \"${val}\"/;H};x}"

	sed -i "/^${var} =/{h;s/=.*/= \"${val}\"/};\${x;/^$/{s//${var} = \"${val}\"/;H};x}" ${infile}

	debug "$(cat ${infile})"
}

function get_md5sum () {
	local MYPWD=$(pwd)
	local DIRECTORY=${1}

	if [ -d ${DIRECTORY} ]; then
		cd ${DIRECTORY}
		local FILES=$(find . -maxdepth 1 -type f)

		for file in ${FILES}; do
			md5sum ${file}
			if [ "$?" -ne "0" ]; then
				err "md5sum for ${file}"
			fi
		done
	fi
	cd ${MYPWD}
}

#
# link conf/auto.conf to conf/auto.conf.tmpl
#
function do_link_auto_conf () {
	local PWD=$(pwd)
	local MODE=${1}

	rm -rf ${PWD}/conf/auto.conf
	ln -s ${PWD}/conf/auto.conf.${MODE} ${PWD}/conf/auto.conf
	! [ -e ${PWD}/conf/auto.conf ] && error_out "missing auto.conf"
}

main () {
	# this disables network check
	export CONNECTIVITY_CHECK_URIS=" "

	local BUILD_DIR=${1}
	local DEPLOYDIR=$(readlink -f ./${BUILD_DIR})/deployment
	local LAYER="meta-tqmx86"
	local ALL_TARGETS=$(${SCRIPTPATH}/ls-machines)
	local CONFIG=${2}
	local IMAGES="core-image-minimal"
	local MODE="normal"

	if ! [ -z "${3}" ]
	then
		if [ "${3}" == "mirror" ] || [ "${3}" == "ci" ] || [ "${3}" == "normal" ]
		then
			MODE=${3}
		else
			usage
			exit 1
		fi
	fi

	echo $1 $2 $3 $MODE

	# filter out machines from the ${LAYER} based on ${CONFIG}
	case ${CONFIG} in
	"x86" )
		IMAGES="core-image-base"
		;;
	* )
		usage
		exit 1
		;;
	esac

	# filter out double entries in case we build multiple images per config
	ALL_TARGETS=$(echo ${ALL_TARGETS} | tr ' ' '\n' | sort -u)
	debug "Targets to build: ${ALL_TARGETS}"

	export MACHINE=$(echo ${ALL_TARGETS} | awk '{ print $1 }')
	# clean conf, to enforce a really clean configuration and to enable
	# incremental changes in the config using our template dir
	rm -rf ${BUILD_DIR}/conf
	# source the real setup workhorse.
	. ./setup-environment ${BUILD_DIR} ${CONFIG}
	[ "$?" -ne "0" ] && error_out "sourcing setup-environment failed"

	if ! [ -f ./version.info ]; then
		${SCRIPTPATH}/poky-version-check.sh mkinfo
		[ "$?" -ne "0" ] && error_out "failed to create version.info"
	else
		${SCRIPTPATH}/poky-version-check.sh check
		[ "$?" -ne "0" ] && error_out "not clean and version changed"
	fi

	cmp conf/bblayers.conf conf/bblayers.conf.tmpl > /dev/null
	[ "$?" -ne "0" ] && error_out "Your conf/bblayers.conf (or the template changed)"

	# modify local conf as needed before executing bitbake
	if [ "${MODE}" == "mirror" ]; then
		echo "build mirror"
		do_link_auto_conf ${MODE}
		echo "clean local dirs in $(pwd) ..."
		rm -rf ./cache ./tmp ./sstate-cache
		# get DL_DIR from local.conf to cleanup packages generated from git ...
		SETTER=$(bitbake -e | grep ^"DL_DIR=")
		echo "$SETTER"
		export ${SETTER}
		# if there is a .done file and / or a git2_*.tar.gz it seems the
		# fetcher does not rerun git to update the repo
		echo "clean git2 tarballs from ${DL_DIR} ..."
		rm -f ${DL_DIR}/git2_*.tar.gz
		rm -f ${DL_DIR}/git2_*.tar.gz.done
		ls -1 ${DL_DIR}/git2_*

		for img in ${IMAGES}; do
			# now force bitbake to do a --runall fetch for the image to generate
			for t in ${ALL_TARGETS}; do
				export MACHINE=${t}
				echo "baking: ${MACHINE} ${img} with --runall=fetch"
				bitbake ${img} --runall=fetch -k
				[ "$?" -ne "0" ] && error_out "fetching ($img for $t) failed"
			done
		done

		URL=$(bitbake -e | grep ^"SOURCE_MIRROR_URL=")
		export ${URL}
		SOURCE_MIRROR_URL=${SOURCE_MIRROR_URL#\"*}
		SOURCE_MIRROR_URL=${SOURCE_MIRROR_URL%\"*}
		SOURCE_MIRROR_URL=${SOURCE_MIRROR_URL#file://*}

		DL_DIR=${DL_DIR#\"*}
		DL_DIR=${DL_DIR%\"*}

		echo "copy tarballs from ${DL_DIR} to ${SOURCE_MIRROR_URL} ..."
		FILES=$(find ${DL_DIR} -maxdepth 1 -type f -not -name "*.done")
		echo "copy ${FILES}"
		for f in ${FILES}; do
			cp ${f} ${SOURCE_MIRROR_URL}
		done

		CWD=$(pwd)
		cd ${DL_DIR}
		FILES=$(find uninative -maxdepth 2 -type f -not -name "*.done")
		for f in ${FILES}; do
			DIR=$(dirname ${f})
			mkdir -p ${SOURCE_MIRROR_URL}/${DIR}
			cp ${f} ${SOURCE_MIRROR_URL}/${DIR}
		done
		cd ${CWD}
	else
		echo "build images"

		#
		# clean deploydir for CI builds
		#
		if [ "${MODE}" == "ci" ]; then
			if [ -d "${DEPLOYDIR}" ]; then
				rm -rf "${DEPLOYDIR}"
			fi
		fi

		do_link_auto_conf ${MODE}

		if ! [ -z ${SSTATE_DIR} ]; then
			# add SSTATE dir outside of builddir, optimize global builds
			assign_or_replace SSTATE_DIR ${SSTATE_DIR} conf/local.conf
		else
			echo "env SSTATE_DIR empty, using local dir or add it to your site.conf / auto.conf"
		fi
		if ! [ -z ${DL_DIR} ]; then
			# add DL_DIR dir outside of builddir, optimize global builds
			assign_or_replace DL_DIR ${DL_DIR} conf/local.conf

		else
			echo "env DL_DIR empty, using local dir or add it to your site.conf / auto.conf"
		fi

		for img in ${IMAGES}; do
			# now force bitbake to generate images for all targets ...
			for t in ${ALL_TARGETS}; do
				local err;
				# overwrite MACHINE
				export MACHINE=${t}

				#
				# do a fetchall to force filling DL_DIR
				#
				if [ "${MODE}" == "ci" ]; then
					echo "baking: ${MACHINE} ${img} with --runall=fetch"
					bitbake ${img} --runall=fetch -k
					[ "$?" -ne "0" ] && error_out "fetching ($img for $t) failed"
				fi

				echo "baking ${MACHINE} ${img} ..."
				# create image for $MACHINE
				bitbake ${img}
				err=${?}
				[ "${err}" -ne "0" ] && error_out "bitbake ${img} for ${MACHINE} failed"
			done
		done

		if [ "${MODE}" == "ci" ]; then
			mkdir -p ${DEPLOYDIR}
			local ARTIFACTSDIR=$(pwd)/tmp/deploy/images
			local STAMP=$(${SCRIPTPATH}/git-revision-name.sh "${YOCTO_VERSION}")
			local GIT_STAMP_FILE="${DEPLOYDIR}/${CONFIG}-stamp"
			# note: this depends on a selected distro
			local VERSION=$(bitbake -e | grep ^"DISTRO_VERSION=")
			export ${VERSION}
			DISTRO_VERSION=${DISTRO_VERSION#\"*}
			DISTRO_VERSION=${DISTRO_VERSION%\"*}
			local CODENAME=$(bitbake -e | grep ^"DISTRO_CODENAME=")
			export ${CODENAME}
			DISTRO_CODENAME=${DISTRO_CODENAME#\"*}
			DISTRO_CODENAME=${DISTRO_CODENAME%\"*}
			local ARCHIVE_BASENAME=${CONFIG}_${DISTRO_CODENAME}_${DISTRO_VERSION}_${STAMP}

			git log -1 > ${GIT_STAMP_FILE}

			for t in ${ALL_TARGETS}; do
				local MACHINE=${t}
				local MACHINE_ARCHIVE=${MACHINE}_${ARCHIVE_BASENAME}
				echo "archiving ${MACHINE} ..."
				# we create some files in ${ARTIFACTSDIR}/${MACHINE}, clean them before recreate
				rm -f ${ARTIFACTSDIR}/${MACHINE}/*.info
				rm -f ${ARTIFACTSDIR}/${MACHINE}/*.md5sum
				# create a file containing md5sum of files
				get_md5sum ${ARTIFACTSDIR}/${MACHINE} > ${DEPLOYDIR}/${MACHINE_ARCHIVE}.md5sum
				cp ${DEPLOYDIR}/${MACHINE_ARCHIVE}.md5sum ${ARTIFACTSDIR}/${MACHINE}
				# create a file containing the version we are build from
				cp ${GIT_STAMP_FILE} ${ARTIFACTSDIR}/${MACHINE}/${MACHINE_ARCHIVE}.info
				printf "\ngit submodule url:\n\n" >> ${ARTIFACTSDIR}/${MACHINE}/${MACHINE_ARCHIVE}.info
				git submodule foreach --quiet 'echo "$name " `git remote get-url origin` ' >> ${ARTIFACTSDIR}/${MACHINE}/${MACHINE_ARCHIVE}.info
				printf "\ngit submodule info:\n\n" >> ${ARTIFACTSDIR}/${MACHINE}/${MACHINE_ARCHIVE}.info
				git submodule >> ${ARTIFACTSDIR}/${MACHINE}/${MACHINE_ARCHIVE}.info
				# create image archive for $MACHINE
				tar -cvzf ${DEPLOYDIR}/${MACHINE_ARCHIVE}.BIN.tar.gz -C ${ARTIFACTSDIR} ${MACHINE}
				[ "$?" -ne "0" ] && error_out "archiving for ${MACHINE} failed"
			done
			tar -cvzf ${DEPLOYDIR}/${ARCHIVE_BASENAME}.LIC.tar.gz -C $(pwd)/tmp/deploy licenses

			# create a mirror archive
			mkdir ${DEPLOYDIR}/${ARCHIVE_BASENAME}.MIRROR.SRC

			SETTER=$(bitbake -e | grep ^"DL_DIR=")
			export ${SETTER}
			# remove the '"' from the var, otherwise usage will fail
			DL_DIR=${DL_DIR#\"*}
			DL_DIR=${DL_DIR%\"*}
			# query all archived sources, needs archiver class in config
			local ARCHIVED_SRC_PATH=$(ls -1 $(pwd)/tmp/deploy/sources/*/*/*)
			# copy the file from archived sources if it exists in DL_DIR
			for f in ${ARCHIVED_SRC_PATH}; do
				local FILENAME="${DL_DIR}/$(basename ${f})"
				if [ -e ${FILENAME} ]; then
					cp "${FILENAME}" ${DEPLOYDIR}/${ARCHIVE_BASENAME}.MIRROR.SRC;
				else
					debug "$f has no counterpart ${FILENAME}"
				fi
			done
			#
			# we assume here that bitbake is configured to use shallow cloning
			# and that packages are tar.gz''
			#
			local ARCHIVE_GIT=$(ls -1 ${DL_DIR}/gitshallow_*.tar.gz)
			local ARCHIVE_GITSM=$(ls -1 ${DL_DIR}/gitsmshallow_*.tar.gz)
			for f in ${ARCHIVE_GIT}; do
				cp "${f}" ${DEPLOYDIR}/${ARCHIVE_BASENAME}.MIRROR.SRC;
			done
			for f in ${ARCHIVE_GITSM}; do
				cp "${f}" ${DEPLOYDIR}/${ARCHIVE_BASENAME}.MIRROR.SRC;
			done

			tar -cvzf ${DEPLOYDIR}/${ARCHIVE_BASENAME}.MIRROR.SRC.tar.gz -C ${DEPLOYDIR} ${ARCHIVE_BASENAME}.MIRROR.SRC
			# do some cleanup
			rm -rf ${DEPLOYDIR}/${ARCHIVE_BASENAME}.MIRROR.SRC
		fi
	fi

	return 0
}

main "${@}"
