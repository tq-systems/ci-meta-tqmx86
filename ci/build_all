#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2017-2023 TQ-Systems GmbH <oss@ew.tq-group.com>,
# D-82229 Seefeld, Germany.
# Author: Markus Niebel, Martin Schmiedel
#
# Description: build all machines in a layer with a given config
#
###############################################################################
set -e
set -C # noclobber

# TRAP SIGNALS
trap 'cleanup' QUIT EXIT

trap 'error_abort $LINENO' ERR

# For security reasons, explicitly set the internal field separator
# to newline, space, tab
OLD_IFS=$IFS
IFS='
 	'

function cleanup () {
	IFS="${OLD_IFS}"
	return 0
}

function error_abort () {
	echo "error at $1"
	cleanup
}

readonly SCRIPTNAME="${0}"
readonly SCRIPTPATH=$(dirname "$(readlink -f "${0}")")
readonly SCRIPT="$(basename "${0}")"

# depends on bitbake / poky version
readonly BITBAKE_GIT_MIRROR_PKG_EXTENSION="tar.gz"

. ${SCRIPTPATH}/utils

usage() {
	echo -e "\nUsage: ${SCRIPTNAME} <build-dir> [template] [--dryrun] [--debug] \n \
	<build-dir>: specifies the build directory location (required) \n \
	[template]: template bblayers.conf to use \n \
	[-h|--help]: print this message \n \
	[--dryrun]: don't call bitbake \n \
	[--develmode]: allow development mode (use different auto.conf to disable CI features) \n \
	[--debug]: print additional informations \n
	If the variable \"LOCAL\" is defined in environment of ${SCRIPT}, the
	variables \"DISTRO_LIST\", \"MACHINE_LIST\" and \"IMAGE_LIST\" can be used
	to define what is built. Otherwise the lists are calculated."
}

main () {

	pos_params=""

	while (( "$#" )); do
		case "$1" in
		-h|--help )
			usage
			return 0
			;;
		--debug )
			DEBUG="on"
			shift
			;;
		--dryrun )
			dryrun="on"
			shift
			;;
		--devel )
			develmode="on"
			shift
			;;
		-*|--*=) # unsupported flags
			error_out "Error: Unsupported flag $1"
			exit 1
			;;
		*) # preserve positional arguments
			pos_params="$pos_params $1"
			shift
			;;
		esac
	done

	# set positional arguments in their proper place
	eval set -- "$pos_params"

	if [ $# -lt 1 ]
	then
		usage
		exit 1
	fi

	# TODO: can we split this?
	local disable_archive="no"
	if ! [ -z ${LOCAL} ]
	then
		disable_archive="yes"
	fi

	local build_dir=${1}
	local config="mainline"
	if ! [ -z "${2}" ]
	then
		config=${2}
	fi

	local top_dir=$(pwd)
	local distros=$(get_distros_for_config "${config}")
	local machines=$(get_machines "${config}")
	local stamp=$(${SCRIPTPATH}/git-revision-name.sh "${YOCTO_VERSION}")

	debug "Machines to build: ${machines}"
	debug "Distros to build: ${distros}"

	for distro in ${distros}
	do
		# GENERAL

		local images=$(get_images ${distro})
		debug "Images to build: ${images}"

		# source the real setup workhorse
		export EULA="y"
		export DISTRO=${distro}
		export MACHINE=$(echo ${machines} | awk '{ print $1 }')

		# clean conf, to enforce a really clean configuration and to enable
		# incremental changes in the config using our template dir
		rm -rf ${build_dir}_${distro}/conf

		# although DISTRO and MACHINE are exported, setup-environment
		# uses these variable mainly to set default in local.conf
		# afterwards they can be set again to iterate over all buildable
		# machines
		if ! . ./setup-environment ${build_dir}_${distro} ${config}
		then
			error_out "sourcing setup-environment failed"
		fi

		info "build images"
		local deploydir=$(readlink -f ./deployment)

		#
		# clean deploydir for CI builds
		# config bitbake from autoconf template
		#
		if [ -z ${develmode} ]
		then
			if [ -d "${deploydir}" ]; then
				rm -rf "${deploydir}"
			fi
			do_link_auto_conf "ci"
		else
			do_link_auto_conf "normal"
		fi

		if ! [ -z ${SSTATE_DIR} ]; then
			# add SSTATE dir outside of builddir, optimize global builds
			assign_or_replace SSTATE_DIR ${SSTATE_DIR} "=" conf/local.conf
		else
			info "env SSTATE_DIR empty, using local dir or add it to your site.conf / auto.conf"
		fi

		if ! [ -z ${DL_DIR} ]; then
			# add DL_DIR dir outside of builddir, optimize global builds
			assign_or_replace DL_DIR ${DL_DIR} "=" conf/local.conf

		else
			info "env DL_DIR empty, using local dir or add it to your site.conf / auto.conf"
		fi

		# note: this depends on a selected distro
		local version=$(bitbake -e | grep ^"DISTRO_VERSION=")
		export ${version}
		DISTRO_VERSION=${DISTRO_VERSION#\"*}
		DISTRO_VERSION=${DISTRO_VERSION%\"*}
		local codename=$(bitbake -e | grep ^"DISTRO_CODENAME=")
		export ${codename}
		DISTRO_CODENAME=${DISTRO_CODENAME#\"*}
		DISTRO_CODENAME=${DISTRO_CODENAME%\"*}

		for img in ${images}
		do
			# now force bitbake to generate images for all targets ...
			for machine in ${machines}
			do
				# overwrite MACHINE
				export MACHINE=${machine}
				# create image for $MACHINE
				info "baking: ${machine} ${distro} ${img} ..."

				if [ -z ${dryrun} ]
				then
					if ! bitbake ${img}
					then
						error_out "bitbake ${img} for ${MACHINE} failed"
					fi
				fi
			done
		done
		if [ "${disable_archive}" = "no" ]
		then
			# TODO: use bitbake variables
			local artifactsdir=$(pwd)/tmp/deploy/images
			local git_stamp_file="${deploydir}/${config}-stamp"

			mkdir -p ${deploydir}
			git log -1 > ${git_stamp_file}

			for machine in ${machines}; do
				local machine_archive=${machine}_${config}_${DISTRO_CODENAME}_${distro}_${stamp}
				info "archiving ${machine} ..."
				# we create some files in ${ARTIFACTSDIR}/${MACHINE}, clean them before recreate
				rm -f ${artifactsdir}/${machine}/*.info
				rm -f ${artifactsdir}/${machine}/*.md5sum
				# create a file containing md5sum of files
				get_md5sum ${artifactsdir}/${machine} > ${deploydir}/${machine_archive}.md5sum
				cp ${deploydir}/${machine_archive}.md5sum ${artifactsdir}/${machine}
				# create a file containing the version we are build from
				cp ${git_stamp_file} ${artifactsdir}/${machine}/${machine_archive}.info
				printf "\ngit submodule url:\n\n" >> ${artifactsdir}/${machine}/${machine_archive}.info
				git submodule foreach --quiet 'echo "$name " `git remote get-url origin` ' >> ${artifactsdir}/${machine}/${machine_archive}.info
				printf "\ngit submodule info:\n\n" >> ${artifactsdir}/${machine}/${machine_archive}.info
				git submodule >> ${artifactsdir}/${machine}/${machine_archive}.info
				# create image archive for $MACHINE
				if ! tar -cvf ${deploydir}/${machine_archive}.BIN.tar.gz -C ${artifactsdir} ${machine} --use-compress-program=pigz
				then
					error_out "archiving for ${machine} failed"
				fi
			done
		fi

		cd ${top_dir}
	done
	if [ "${disable_archive}" = "no" ]
	then
		# create licenses and mirror archive
		local archive_basename=${config}_${stamp}

		mkdir -p ${archive_basename}.LIC
		# copy the file from licenses
		local licenses_src_path=$(ls -d ${build_dir}_*/tmp/deploy/licenses/*)
		for f in ${licenses_src_path}; do
			cp -r "${f}" ${archive_basename}.LIC;
		done

		tar -cvf ${archive_basename}.LIC.tar.gz ${archive_basename}.LIC --use-compress-program=pigz
		# do some cleanup
		rm -rf ${archive_basename}.LIC

		mkdir -p ${archive_basename}.MIRROR.SRC
		setter=$(bitbake -e | grep ^"DL_DIR=")
		export ${setter}
		# remove the '"' from the var, otherwise usage will fail
		DL_DIR=${DL_DIR#\"*}
		DL_DIR=${DL_DIR%\"*}
		# query all archived sources, needs archiver class in config
		local archived_src_path=$(ls -1 ${build_dir}_*/tmp/deploy/sources/*/*/*)

		# copy the file from archived sources if it exists in DL_DIR
		for f in ${archived_src_path}; do
			local filename="${DL_DIR}/$(basename ${f})"
			if [ -e ${filename} ]; then
				cp "${filename}" ${archive_basename}.MIRROR.SRC;
			else
				debug "$f has no counterpart ${filename}"
			fi
		done
		#
		# we assume here that bitbake is configured to use shallow cloning
		# and that packages are tar.gz''
		#
		local archive_git=$(ls -1 ${DL_DIR}/gitshallow_*.${BITBAKE_GIT_MIRROR_PKG_EXTENSION})
		local archive_gitsm=$(ls -1 ${DL_DIR}/gitsmshallow_*.${BITBAKE_GIT_MIRROR_PKG_EXTENSION})
		for f in ${archive_git}; do
			cp "${f}" ${archive_basename}.MIRROR.SRC;
		done
		for f in ${archive_gitsm}; do
			cp "${f}" ${archive_basename}.MIRROR.SRC;
		done

		tar -cvf ${archive_basename}.MIRROR.SRC.tar.gz ${archive_basename}.MIRROR.SRC --use-compress-program=pigz
		# do some cleanup
		rm -rf ${archive_basename}.MIRROR.SRC
	fi
}

main "${@}"
