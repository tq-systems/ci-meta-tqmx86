#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (C) 2021-2023 TQ-Systems GmbH <oss@ew.tq-group.com>,
# D-82229 Seefeld, Germany.
# Author: Markus Niebel, Martin Schmiedel
#
# Description: shared utils for buildscripts
#
###############################################################################

####
# func:   __print
# brief:  print messags
# param:  $1 - message type (info, err, dbg)
#         $2 - message
# return: ---
####
__print () {
	local type="${1}"
	local msg="${2}"

	case ${type} in
		info)
			echo "${SCRIPT} [INFO]: ${msg}"
			;;
		err)
			echo "${SCRIPT} [ERROR]: ${msg}" >&2
			;;
		dbg)
			[ "${DEBUG}" = "on" ] && echo "${SCRIPT} [DEBUG]: ${msg}"
			;;
	esac
}

debug () {
	__print dbg "$@"
}

info () {
	__print info "$@"
}

error () {
	__print err "$@"
}

error_out () {
	echo "FATAL: $1" >&2
	exit 1
}

##############
# replace assigned variable or assign variable if not already assigned
# $1        - variable to assign
# $2        - value for variable
# $3        - assignment operator
# $4        - file to edit
#
# use sed to find and replace existing assignment or add assignment
# First the assignment of local vars ensures proper formatting so that it is
# possible to use also variables as expressions, so the finally alos assignments
# of this types could be made in the file to edit:
# "${VARNAME} = ${VALUE}"
# The somewhat complex sed expression uses hold and pattern space
# (see sed manual) to either replace a line starting with '${var} ' with
# '${var} ${op} ${val}' (first expression) or add such a line if no line starting
# with '${var} ' could be found in the file
##############
assign_or_replace() {
	local var=${1////\\/}
	local val=${2////\\/}
	local op=${3////\\/}
	local infile=${4}

	sed --in-place "/^${var} /{h;s/.*/${var} ${op} \"${val}\"/};\${x;/^$/{s//${var} ${op} \"${val}\"/;H};x}" ${infile}
}

####
# func:   get_md5sum
# brief:  calculate md5sum for all files directory
# param:  $1 - directory
# return: file containing md5sum of files
####
get_md5sum () {
	local mypwd=$(pwd)
	local directory=${1}

	if [ -d ${directory} ]; then
		cd ${directory}
		local files=$(find . -maxdepth 1 -type f)

		for file in ${files}; do
			md5sum ${file}
			if [ "$?" -ne "0" ]; then
				err "md5sum for ${file}"
			fi
		done
	fi
	cd ${mypwd}
}

####
# func:   do_link_auto_conf
# brief:  update the auto.conflink based on template
#         link conf/auto.conf to conf/auto.conf.tmpl
# param:  $1 - template (ci/mirror/normal)
# return: ---
####
do_link_auto_conf () {
	local PWD=$(pwd)
	local templ=${1}

	rm -rf ${PWD}/conf/auto.conf
	ln -s ${PWD}/conf/auto.conf.${templ} ${PWD}/conf/auto.conf
	! [ -e ${PWD}/conf/auto.conf ] && error_out "missing auto.conf"
}

####
# func:   get_images
# brief:  return image based on distro
# param:  $1 - distro
# return: image
####
get_images () {
	local distro=${1}
	local chosen_images="core-image-base"

	if [ -z "${LOCAL}" ] || [ -z "${IMAGE_LIST}" ]
	then
		echo "${chosen_images}"
	else
		echo "${IMAGE_LIST}"
	fi
}

####
# func:   valid_config
# brief:  check if config is in list of supported configs
# param:  $1 - config
####
valid_config() {
	local config=${1}
	local supported_configs="$(${SCRIPTPATH}/ls-configs)"

	echo ${supported_configs} | grep -wq "${config}"
}

####
# func:   get_machines
# brief:  return buildable machines for config
# param:  $1 - config (x86)
# return: list of machines
####
get_machines () {
	local config=${1}
	local all_machines=$("${SCRIPTPATH}"/ls-machines)
	local chosen_machines=${all_machines}

	if ! valid_config ${config}; then
		error "invalid config: ${config}"
		return -1
	fi

	if [ -z "${LOCAL}" ] || [ -z "${MACHINE_LIST}" ]
	then
		echo "${chosen_machines}"
	else
		echo "${MACHINE_LIST}"
	fi
}

####
# func:   get_distros_for_config
# brief:  return buildable machines for config
# param:  $1 - config (x86)
# return: list of supported distros for the given config
####
get_distros_for_config () {
	local chosen_distros="poky"
	local config=${1}

	if ! valid_config ${config}; then
		error "invalid config: ${config}"
		return -1
	fi

	if [ -z "${LOCAL}" ] || [ -z "${DISTRO_LIST}" ]
	then
		echo "${chosen_distros}"
	else
		echo "${DISTRO_LIST}"
	fi
}
