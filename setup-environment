#!/bin/sh
# -*- mode: shell-script; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2012, 2013, 2016 O.S. Systems Software LTDA.
# Authored-by:  Otavio Salvador <otavio@ossystems.com.br>
#
# Copyright (C) TQ-Systems GmbH
# 2017 - 2022 Markus Niebel <Markus.Niebel@ew.tq-group.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Add options for the script
# Copyright (C) 2013 Freescale Semiconductor, Inc.

CWD=$(pwd)
PROGNAME="setup-environment"
SCRIPTDIR="${CWD}/ci"
CONFIG_TEMPLATE=x86
# conf templates
TEMPLATECONF=${CWD}/sources/template/conf/templates/ci

DEFAULT_DISTRO_x86="poky"

usage()
{
    echo "
Usage: MACHINE=<machine> DISTRO=<distro> source ${PROGNAME} <build-dir> <template>
Usage:                                   source ${PROGNAME} <build-dir> <template>
    <machine>    machine name
    <distro>     distro name
    <build-dir>  build directory
    <template>: template bblayers.conf to use (optional, default: ${CONFIG_TEMPLATE})

The first usage is for creating a new build directory. In this case, the
script creates the build directory <build-dir>, configures it for the
specified <machine> and <distro>, and prepares the calling shell for running
bitbake on the build directory.

The second usage is for using an existing build directory. In this case,
the script prepares the calling shell for running bitbake on the build
directory <build-dir>. The build directory configuration is unchanged.
"

    ls sources/meta-tq/meta-tq/conf/machine/*.conf > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "
Supported configs:
$(${SCRIPTDIR}/ls-configs)

Supported machines:
$("${SCRIPTDIR}/ls-machines" meta-tq/meta-tq)

Available poky distros:
$("${SCRIPTDIR}/ls-distros" poky/meta-poky)

Examples:

- To create a new Yocto build directory:
  \$ MACHINE=<machine> DISTRO=<distro> source ${PROGNAME} build-dir <config>

- To use an existing Yocto build directory:
  \$ source ${PROGNAME} build-dir

See README.md for valid combinations of <machine>, <distro> and <config>
"
    fi
}

clean_up() {
	unset ARGS
	unset BBLAYERS_TEMPLATE
	unset CONFIG_TEMPLATE
	unset CWD
	unset DISTRO_VAR
	unset generated_config
	unset build_dir_setup_enabled
	unset LIST_MACHINES
	unset LONGOPTS
	unset OEROOT
	unset PROGNAME
	unset SCRIPTDIR
	unset SHORTOPTS
	unset TEMPLATECONF
	unset THE_DISTRO
	unset THE_MACHINE
	unset VALID_MACHINE
}

# get command line options
SHORTOPTS="h"
LONGOPTS="help"

ARGS=$(getopt --options ${SHORTOPTS}  \
  --longoptions ${LONGOPTS} --name ${PROGNAME} -- "$@" )
# Print the usage menu if invalid options are specified
if [ $? != 0 -o $# -lt 1 ]; then
   usage && clean_up
   return 1
fi

eval set -- "${ARGS}"
while true;
do
    case $1 in
        -h|--help)
           usage
           clean_up
           return 0
           ;;
        --)
           shift
           break
           ;;
    esac
done

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..." >&2
fi

if [ -n "${2}" ]; then
    CONFIG_TEMPLATE=${2}
fi

BBLAYERS_TEMPLATE=bblayers.conf.${CONFIG_TEMPLATE}

if [ ! -e $1/conf/local.conf.sample ]; then
    build_dir_setup_enabled="true"
else
    build_dir_setup_enabled="false"
fi

if [ "${build_dir_setup_enabled}" = "true" ]; then 

    if [ -z "${MACHINE}" ]; then
        THE_MACHINE=$(${SCRIPTDIR}/setup_builddir default_machine ${CONFIG_TEMPLATE})
    else
        THE_MACHINE=${MACHINE}
    fi

    if [ -z "${THE_MACHINE}" ]; then
       usage
       echo "ERROR: You must set MACHINE when creating a new build directory."  >&2
       clean_up
       return 1
    fi

    if [ -z "${DISTRO}" ]; then
        DISTRO_VAR=DEFAULT_DISTRO_${CONFIG_TEMPLATE}
        eval THE_DISTRO=\$$DISTRO_VAR
    else
        eval THE_DISTRO=${DISTRO}
    fi

    if [ -z "${THE_DISTRO}" ]; then
        usage
        echo "ERROR: You must set DISTRO when creating a new build directory." >&2
        clean_up
        return 1
    fi
fi

OEROOT="${CWD}/sources/poky"
if [ -e "${CWD}/sources/oe-core" ]; then
    OEROOT="${CWD}/sources/oe-core"
fi

BB_ENV_PASSTHROUGH_ADDITIONS="${BB_ENV_PASSTHROUGH_ADDITIONS} TQ_GIT_BASEURL TQ_GIT_PROTOCOL"

# Hide messages from oe-init-build-env.
# Since we do some more stuff after the basic builddir setup
# as setting own bblayers.conf and display some licenses
# the output will not be read from most of the users.
# We therefore show the content of conf-notes.txt rigth before finishing.
. "${OEROOT}/oe-init-build-env" ${CWD}/${1} > /dev/null

# if conf/local.conf not generated, no need to go further
if [ ! -e "conf/local.conf" ]; then
    clean_up && return 1
fi

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="`echo ${PATH} | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//'`"

generated_config=
if [ "$build_dir_setup_enabled" = "true" ]; then
    "${SCRIPTDIR}/setup_builddir" confdir_setup "${TEMPLATECONF}" "${BBLAYERS_TEMPLATE}"
    if [ "${?}" -ne "0" ]; then
        clean_up && return 1
    fi
    "${SCRIPTDIR}/setup_builddir" localconf_defaults "${THE_MACHINE}" "${THE_DISTRO}"
    generated_config=1
fi

"${SCRIPTDIR}/setup_builddir" handle_licenses "${CWD}"

# Print welcome banner, since we drop output from oe-init-build-env above
if [ -e "${TEMPLATECONF}/conf-notes.txt" ]; then
    cat "${TEMPLATECONF}/conf-notes.txt"
fi

# finally give info whether we use an existing buildspace or
# just created a new one ...
if [ -n "${generated_config}" ]; then
    cat <<EOF
Your build environment has been configured with:

    MACHINE=${THE_MACHINE}
    DISTRO=${THE_DISTRO}
EOF
else
    echo "Your configuration files at $1 have not been touched."
    cmp conf/bblayers.conf conf/bblayers.conf.tmpl > /dev/null
    [ "$?" -ne "0" ] && echo "Your conf/bblayers.conf (or the template changed)"
fi

clean_up
